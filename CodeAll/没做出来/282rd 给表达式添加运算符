给定一个仅包含数字 0-9 的字符串 num 和一个目标值整数 target ，在 num 的数字之间添加 二元 运算符（不是一元）+、- 或 * ，返回所有能够得到目标值的表达式。

示例 1:

输入: num = "123", target = 6
输出: ["1+2+3", "1*2*3"] 
示例 2:

输入: num = "232", target = 8
输出: ["2*3+2", "2+3*2"]
示例 3:

输入: num = "105", target = 5
输出: ["1*0+5","10-5"]
示例 4:

输入: num = "00", target = 0
输出: ["0+0", "0-0", "0*0"]
示例 5:

输入: num = "3456237490", target = 9191
输出: []

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/expression-add-operators
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
#############################
本来的想法是读入前两个数字和操作符，根据操作符的逻辑级别来做下一步运算，但是有时候需要将两个数字合成一个数字，如用&代替，这个级别是最高的，然后是*，然后是+-
这就需要读入三个数字和两个运算符，才能迭代，好像可以做出来。
############################
把两个数字合成一个这个操作不应该和操作符放在一起，本就不好操作的有顺序的操作符就更加难搞了，应该使用循环截取操作数，并且第一位不能为零。
#############################
class Solution {
    int n;
    String num;
    int target;
    List<String> ans;

    public List<String> addOperators(String num, int target) {
        this.n = num.length();
        this.num = num;
        this.target = target;
        this.ans = new ArrayList<String>();
        StringBuffer expr = new StringBuffer();
        backtrack(expr, 0, 0, 0);
        return ans;
    }

    public void backtrack(StringBuffer expr, int i, long res, long mul) {
        if (i == n) {
            if (res == target) {
                ans.add(expr.toString());
            }
            return;
        }
        int signIndex = expr.length();
        if (i > 0) {
            expr.append(0); // 占位，下面填充符号
        }
        long val = 0;
        // 枚举截取的数字长度（取多少位），注意数字可以是单个 0 但不能有前导零
        for (int j = i; j < n && (j == i || num.charAt(i) != '0'); ++j) {
            val = val * 10 + num.charAt(j) - '0';
            expr.append(num.charAt(j));
            if (i == 0) { // 表达式开头不能添加符号
                backtrack(expr, j + 1, val, val);
            } else { // 枚举符号
                expr.setCharAt(signIndex, '+');
                backtrack(expr, j + 1, res + val, val);
                expr.setCharAt(signIndex, '-');
                backtrack(expr, j + 1, res - val, -val);
                expr.setCharAt(signIndex, '*');
                backtrack(expr, j + 1, res - mul + mul * val, mul * val);
            }
        }
        expr.setLength(signIndex);
    }
}

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/expression-add-operators/solution/gei-biao-da-shi-tian-jia-yun-suan-fu-by-2o1s7/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
######################################
首先数字不能有前导零，但是可以为单个零，所以j==i的时候是可以为零的，表示只有一位。然后注意之前的if (i > 0) {expr.append(0); // 占位，下面填充符号}占位，
第一个数字append之后用0占位，然后此时字符序列的长度就是0的下标，后续使用这个下标进行替换符号，因为逻辑上是先添加操作数后添加操作符的，所以使用替换的思路
需要注意的是expr.setLength(signIndex);由于StringBuffer在递归中并不会回溯状态，signIndex肯定是会回溯的，所以使用setLengt来截取字符序列。
这个算法的总体逻辑是碰到+-时将结果和变化分别存下来，当碰到乘法时减去最后的变化再加上变化*新数，因为乘法优先级更高，而就算碰到乘法，下一个也可能是乘法，所以
将mul*val作为变化存下来。
