给你一个由非负整数 a1, a2, ..., an 组成的数据流输入，请你将到目前为止看到的数字总结为不相交的区间列表。

实现 SummaryRanges 类：

SummaryRanges() 使用一个空数据流初始化对象。
void addNum(int val) 向数据流中加入整数 val 。
int[][] getIntervals() 以不相交区间 [starti, endi] 的列表形式返回对数据流中整数的总结。
 

示例：

输入：
["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
输出：
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]

解释：
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // 返回 [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // 返回 [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // 返回 [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // 返回 [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // 返回 [[1, 3], [6, 7]]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/data-stream-as-disjoint-intervals
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
############
class SummaryRanges {
    private TreeSet<Integer> col = new TreeSet<>();
    public SummaryRanges() {

    }
    
    public void addNum(int val) {
        col.add(val);
    }
    
    public int[][] getIntervals() {
        int len = col.size();
        int i =0;
        int temp = 0,temp2 = 0;
        int[][] intervals = new int[len][2];
        Iterator iter = col.iterator();
        if(iter.hasNext()){
            temp = (int)iter.next();
            intervals[0][0] = temp;
            intervals[0][1] = temp;
            while(iter.hasNext()){
                temp2=(int)iter.next();
                if(temp+1 == temp2){
                    temp = temp2;
                    // continue;
                    intervals[i][1] = temp;
                }else{
                    intervals[++i][0] = temp2;
                    intervals[i][1] = temp2;
                    temp = temp2;
                }
            }
        }
        int lenval = 0;
        if (len ==1) return intervals;
        for(int j = len-1;j>=0;j--){
            if(intervals[j][1] ==0){
                lenval++;
            }else{
                break;
            }
        }
        int[][] result = new int[len-lenval][2];
        for(int k=0;k<len-lenval;k++){
            result[k][0]=intervals[k][0];
            result[k][1]=intervals[k][1];
        }
        return result;
    }
}

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * int[][] param_2 = obj.getIntervals();
 */
 ######################
 
