请你设计一个迭代器，除了支持 hasNext 和 next 操作外，还支持 peek 操作。

实现 PeekingIterator 类：

PeekingIterator(int[] nums) 使用指定整数数组 nums 初始化迭代器。
int next() 返回数组中的下一个元素，并将指针移动到下个元素处。
bool hasNext() 如果数组中存在下一个元素，返回 true ；否则，返回 false 。
int peek() 返回数组中的下一个元素，但 不 移动指针。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/peeking-iterator
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

###############
// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

class PeekingIterator implements Iterator<Integer> {
    private Iterator<Integer> iterator1;
    private Integer temp;

    public PeekingIterator(Iterator<Integer> iterator) {
        this.iterator1 = iterator;
        this.temp = iterator1.next();
    }
    
    public Integer peek() {
        return temp;
    }
    
    @Override
    public Integer next() {
        Integer temp2 = temp;
        temp = iterator1.hasNext()?iterator1.next():null;
        return temp2;
    }
    
    @Override
    public boolean hasNext() {
        return temp!=null;
    }
}
##############
官方和三叶的解法和这里的一样。我自己的想法是复制两个iterator然后一个实现peek，另一个实现next和hasnext，peek的用另一个的next赋值后，将iterator变回原来那个。但是实现
失败了，不清楚是什么原因，可能是这个复制是指向同一个指针，相当于同一个变量，所以无法变回去，可以考虑使用copy。
本思路是设置一个变量作为输出口，peek的时候直接输出，next的时候变更这个变量。由于peek的时候没有进行next操作，temp需要指向的是下一个变量供peek直接调用，所以hasNext函数不能使用
原来的函数，而是同样的查看temp的状态。
