##########
所有 DNA 都由一系列缩写为 'A'，'C'，'G' 和 'T' 的核苷酸组成，例如："ACGAATTCCG"。在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。

编写一个函数来找出所有目标子串，目标子串的长度为 10，且在 DNA 字符串 s 中出现次数超过一次。

 

示例 1：

输入：s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
输出：["AAAAACCCCC","CCCCCAAAAA"]
示例 2：

输入：s = "AAAAAAAAAAAAA"
输出：["AAAAAAAAAA"]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/repeated-dna-sequences
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
##########
class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Set<String> result = new HashSet<String>();
        int len = s.length();
        for (int i=0;i<len-10;i++){
            String temp = s.substring(i,i+10);
            for(int j=i+1;j<len-9;j++){
                int k = 0;
                while(temp.charAt(k)==s.charAt(k+j)){
                    k++;
                    if(k==10) break;
                }
                if(k==10) result.add(temp);
            }
        }
        return(Arrays.asList(result.toArray(new String[0])));
    }
}
############
超时了。。。通过双重遍历寻找重复的子串，然而寻找的过程都在做重复计算，只需要将所有子串的出现次数都记录下来大于2就行，因为是固定长度的字串，复杂度就是O(N*10)，10是固定子串的长度
############
class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> result = new ArrayList<String>();
        Map<String,Integer> times = new HashMap<>();
        for (int i=0;i<s.length()-9;i++){
            String temp = s.substring(i,i+10);
            times.put(temp, times.getOrDefault(temp,0)+1);
            if(times.get(temp)==2) result.add(temp);
        }
        return result;
    }
}
################
官方解法二：这种解法比较适用，但是题目更加特殊，题目中的字符串是只由四种字符ATCG构成，所以应该有更快的解法
将ATCG分别编码为00,01,10,11,字符串就可以唯一解码成一个数字，对应的十个字符的字串也是一一映射到一个数字，这个数字由二十位数构成，int为32位，所以可以用int表示。
赋值过程可一个个读入数字，同时之前读入的数字右移两位，再或操作。第一个数字由十个字符构成得到数字后，如果第二个数字也同理得到，那么和上面的解法就没有区别了，编码也没有意义。
实际上，第一个数字左移两位，可以将第一个字符移到高位，再和后两位数字相或，得到一个22位的数字，再和(1<<20)-1相与，可以去掉前两位，得到后二十位数字，即得到第二个数，
之后同理，复杂度降为O(N)。
class Solution {
    static final int L = 10;
    Map<Character, Integer> bin = new HashMap<Character, Integer>() {{
        put('A', 0);
        put('C', 1);
        put('G', 2);
        put('T', 3);
    }};

    public List<String> findRepeatedDnaSequences(String s) {
        List<String> ans = new ArrayList<String>();
        int n = s.length();
        if (n <= L) {
            return ans;
        }
        int x = 0;
        for (int i = 0; i < L - 1; ++i) {
            x = (x << 2) | bin.get(s.charAt(i));
        }
        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();
        for (int i = 0; i <= n - L; ++i) {
            x = ((x << 2) | bin.get(s.charAt(i + L - 1))) & ((1 << (L * 2)) - 1);
            cnt.put(x, cnt.getOrDefault(x, 0) + 1);
            if (cnt.get(x) == 2) {
                ans.add(s.substring(i, i + L));
            }
        }
        return ans;
    }
}
############
三叶的解法，感觉思路和官方解法二是一样的，就是实现方式不同。三叶解法使用的是将字符转化成数字，字符本身是其ASCII码，然后使用一个很大的质数作为移位因子，如“ATCG”
h[0] = 0 ;
h[1] = h[0]*P+'A'='A' ;
h[2] = h[1]*P+'T'='A'*P+'T';
h[3] = h[2]*P+'C'='A'*P^2+'T'*P+C;
h[4] = h[3]*P+'G'='A'*P^3+'T'*P^2+'C'*P+G;
可以看到，P就是发挥进制的作用。同时h[4]-h[3]*P='G';h[4]-h[1]*P^3='T'*P^2+'C'*P+G;可以通过此得到字符串所代表的的数字，这是前缀和的思想。
class Solution {
    int N = (int)1e5+10, P = 131313;
    int[] h = new int[N], p = new int[N];
    public List<String> findRepeatedDnaSequences(String s) {
        int n = s.length();
        List<String> ans = new ArrayList<>();
        p[0] = 1;
        for (int i = 1; i <= n; i++) {
            h[i] = h[i - 1] * P + s.charAt(i - 1);
            p[i] = p[i - 1] * P;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 1; i + 10 - 1 <= n; i++) {
            int j = i + 10 - 1;
            int hash = h[j] - h[i - 1] * p[j - i + 1];
            int cnt = map.getOrDefault(hash, 0);
            if (cnt == 1) ans.add(s.substring(i - 1, i + 10 - 1));
            map.put(hash, cnt + 1);
        }
        return ans;
    }
}

作者：AC_OIer
链接：https://leetcode-cn.com/problems/repeated-dna-sequences/solution/gong-shui-san-xie-yi-ti-shuang-jie-hua-d-30pg/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

