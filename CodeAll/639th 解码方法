#一条包含字母 A-Z 的消息通过以下的方式进行了编码：

'A' -> 1
'B' -> 2
...
'Z' -> 26
要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。例如，"11106" 可以映射为：

"AAJF" 对应分组 (1 1 10 6)
"KJF" 对应分组 (11 10 6)
注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。

除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。例如，编码字符串 "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。对 "1*" 进行解码，相当于解码该字符串可以表示的任何编码消息。

给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。

由于答案数目可能非常大，返回对 109 + 7 取余 的结果。


#
class Solution {
    public int numDecodings(String s) {
        int len = s.length();
        long sum = 0;
        long a = 0;
        long b = 1;
        for(int i=1;i<len;i++){
            sum=b*check1(s.charAt(i-1));
            if(i>1){
                sum+=a*check2(s.charAt(i-2),s.charAt(i-1));
            }
            sum%=1000000007;
            a = b;
            b = sum;
        }
        return (int)sum;
    }
    public int check1(char c){
        if(c=='*') {
            return 9;
        }else if(c == '0'){
            return 0;
        }else{
            return 1;
        }
    }
    public int check2(char c0,char c1){
        if(c0=='*'&&c1=='*'){
            return 15;
        }else if(c0 == '*'){
            if(c1<'7'){
                return 2;
            }else{
                return 1;
            }
        }else if(c1 == '*'){
            if(c0 == '1'){
                return 9;
            }else if(c0 == '2'){
                return 6;
            }else{
                return 0;
            }
        }else{
            if(c0=='1'||(c0=='2'&&c1<'7')){
                return 1;
            }else {
                return 0;
            }
        }
    }

}

#DP问题，a保存的是两字符前所有字符的能解码出种类和，b保存的是一个字符前能解码出的总和，sum保存的是当前解码总和，当然由于收到后一位的影响，所以中间过程可能存在为0的情况
当第一位为*或者其他数字时，b=1,sum=1*9（1）,a=0;迭代，a=1，b=9，如果此时后一位是0，那么sum=0*9=0，这种可能就清零的，所以无须担心后一位的情况，而
sum+=a*check2(s.charAt(i-2),s.charAt(i-1))，即从第二位开始，对前两位的组合解码数目，然后继续迭代a=b；b=sum。同理，a系数后出现不可能的情况时也会清零，当一二位都不合理时，总和为0，即
不可解码。如“904”。

#以下为递归算法，但是错了，不知道为啥。仅供参考，感觉思想上层是一样的，当然动态规划的复杂度小很多，但是通过实例为179/217。
class Solution {
    public int numDecodings(String s) {
        int len = s.length();
        long sum = 0;
        if (s.charAt(0)=='0'){
            return 0;
        }
        if (s.charAt(0)=='*'){
            if(len>1){
                sum=9*numDecodings(s.substring(1));
                if(len==2){
                    if(s.charAt(1)=='*'){
                        sum+=15;
                    }else if(s.charAt(1)<'7'){
                        sum+=2;
                    }else{
                        sum+=1;
                    } 
                }else{
                    if(s.charAt(1)=='*'){
                        sum+=15*numDecodings(s.substring(2));
                    }else if(s.charAt(1)<'7'){
                        sum+=2*numDecodings(s.substring(2));
                    }else{
                        sum+=numDecodings(s.substring(2));
                    }
                }
            }else{
                sum=9;
            }
        }else{
            if(len>1){
                sum=numDecodings(s.substring(1));
                if(len==2){
                    if(s.charAt(1)=='*'){
                        if(s.charAt(0)=='1'){
                            sum+=9;
                        }else if(s.charAt(0)=='2'){
                            sum+=6;
                        }
                    }else if(s.charAt(0)=='1'||(s.charAt(0)=='2'&&s.charAt(1)<'7')){
                            sum+=1;   
                    }
                }else{
                    if(s.charAt(1)=='*'){
                        if(s.charAt(0)=='1'){
                            sum+=9*numDecodings(s.substring(2));
                        }else if(s.charAt(0)=='2'){
                            sum+=6*numDecodings(s.substring(2));
                        }
                    }else{
                        if(s.charAt(0)=='1'||(s.charAt(0)=='2'&&s.charAt(1)<'7')){
                            sum+=numDecodings(s.substring(2));
                        }
                    }
                }
            }else{
                sum+=1;
            }
        }
        sum%=1000000007;
        // System.out.println(sum);
        // System.out.println(s);
        return (int)sum;
    }

}
#同思想的正确实现，还使用了hashmap降低复杂度
public static int numDecodings(String s) {
        int mod = 1000000007;
        if (s == null || s.length() == 0) {
            return 0;
        }
        return (int) process(s.toCharArray(), 0, mod, new HashMap<>());
    }

    /**
     * 字符数组在index后所能组成的组合数量
     * @param chars 字符数组
     * @param index 当前下标
     * @return 当前index位置之后的字符所能组成的组合数量
     */
    public static long process(char[] chars, int index, int mod, Map<Integer, Long> ret) {
        Long res = ret.get(index);
        if (res != null) {
            return res;
        }
        int l = chars.length;
        if (index >= l) {
            return 1;
        }
        char c = chars[index];
        if (c == '0') {
            return 0;
        } else if (index == l - 1) {
            return c == '*' ? 9 : 1;
        }
        long p1 = 0;
        if (index + 1 < l) {
            char nc = chars[index + 1];
            if (c == '*') {
                p1 = process(chars, index + 2, mod, ret) * (nc == '*' ? 15 : nc > '6' ? 1 : 2);
            } else if (c == '1') {
                p1 = process(chars, index + 2, mod, ret) * (nc == '*' ? 9 : 1);
            } else if (c == '2') {
                if (nc <= '6') {
                    p1 = process(chars, index + 2, mod, ret) * (nc == '*' ? 6 : 1);
                }
            }
        }
        long p2 = process(chars, index + 1, mod, ret) * (c == '*' ? 9 : 1);
        long re = (p1 + p2) % mod;
        ret.put(index, re);
        return re;
    }

作者：1uQXdvmIdN
链接：https://leetcode-cn.com/problems/decode-ways-ii/solution/xiao-xue-sheng-cong-bao-li-di-gui-dao-ji-6wn3/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
######

此问题还有个巧妙解法，将字符串解码后的结果，即有A~Z组成的结果进行讨论，求得可能的解码种类
class Solution {
    int mod = (int)1e9+7;
    public int numDecodings(String s) {
        int n = s.length();
        long[] f = new long[3];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            char c = s.charAt(i - 1);
            int t = c - '0';
            long cnt = 0;
            int p1 = (i - 1) % 3, p2 = (i - 2) % 3;
            // 枚举组成什么 item（A -> 1; B -> 2 ...）
            for (int item = 1; item <= 26; item++) { 
                if (item < 10) { // 该 item 由一个字符组成
                    if (c == '*' || t == item) cnt += f[p1];
                } else { // 该 item 由两个字符组成
                    if (i - 2 < 0) break;
                    char prev = s.charAt(i - 2);
                    int u = prev - '0';
                    int a = item / 10, b = item % 10;
                    if ((prev == '*' || u == a) && (t == b || (c == '*' && b != 0))) cnt += f[p2];
                }
            }
            f[i % 3] = cnt % mod;
        }
        return (int)(f[n % 3]);
    }
}

作者：AC_OIer
链接：https://leetcode-cn.com/problems/decode-ways-ii/solution/gong-shui-san-xie-fen-qing-kuang-tao-lun-902h/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
