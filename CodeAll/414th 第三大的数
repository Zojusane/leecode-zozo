给你一个非空数组，返回此数组中 第三大的数 。如果不存在，则返回数组中最大的数。
输入：[2, 2, 3, 1]
输出：1
解释：注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。
此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/third-maximum-number
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
################
class Solution {
    public int thirdMax(int[] nums) {
        int max = nums[0], max1 = nums[0], max2 = nums[0];
        for(int i=0;i<nums.length;i++) {
            max = max<nums[i]?nums[i]:max;
            if(max>nums[i]) max1 = nums[i];
        }
        for(int i=0;i<nums.length;i++) {
            max1= (max1<nums[i]&&nums[i]!=max)?nums[i]:max1;
            if(max1>nums[i]) max2 = nums[i];
        }
        for(int i=0;i<nums.length;i++)  max2= (max2<nums[i]&&nums[i]!=max&&nums[i]!=max1)?nums[i]:max2;
        if(max2 == max1) return max;
        return max2;
        
    }
}
################
简单题，只要遍历三次数组，分别找到前三大的数即可，这里有一个点需要注意，就是给三个max设置初值的时候，要确保max>max1>max2;不然初值就是最大值后面无法修正回来。
########
官方解答1：排序然后找出第三大的数，时间复杂度为O(nlogn),
class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        reverse(nums);
        for (int i = 1, diff = 1; i < nums.length; ++i) {
            if (nums[i] != nums[i - 1] && ++diff == 3) { // 此时 nums[i] 就是第三大的数
                return nums[i];
            }
        }
        return nums[0];
    }

    public void reverse(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }
}
###################
解答二，维护一个有序集合，最多存三个数，如果有数比这三个大，把这三个最小的踢出去，这样最终最小的就是第三大的数。
class Solution {
    public int thirdMax(int[] nums) {
        TreeSet<Integer> s = new TreeSet<Integer>();
        for (int num : nums) {
            s.add(num);
            if (s.size() > 3) {
                s.remove(s.first());
            }
        }
        return s.size() == 3 ? s.first() : s.last();
    }
}
############
有序集合长度大于3，将第一个数remove，因为第一个数为最小数，而由于是集合，没有相同的数。
##############
解答三：我们可以遍历数组，并用三个变量 aa、bb 和 cc 来维护数组中的最大值、次大值和第三大值，以模拟方法二中的插入和删除操作。为方便编程实现，我们将其均初始化为小于数组最小值的元素，视作「无穷小」，比如 -2^{63}−2 
63
  等。

遍历数组，对于数组中的元素 \textit{num}num：

若 \textit{num}>anum>a，我们将 cc 替换为 bb，bb 替换为 aa，aa 替换为 \textit{num}num，这模拟了将 \textit{num}num 插入有序集合，并删除有序集合中的最小值的过程；
若 a>\textit{num}>ba>num>b，类似地，我们将 cc 替换为 bb，bb 替换为 \textit{num}num，aa 保持不变；
若 b>\textit{num}>cb>num>c，类似地，我们将 cc 替换为 \textit{num}num，aa 和 bb 保持不变；
其余情况不做处理。
遍历结束后，若 cc 仍然为 -2^{63}−2 
63
 ，则说明数组中不存在三个或三个以上的不同元素，即第三大的数不存在，返回 aa，否则返回 cc。

class Solution {
    public int thirdMax(int[] nums) {
        long a = Long.MIN_VALUE, b = Long.MIN_VALUE, c = Long.MIN_VALUE;
        for (long num : nums) {
            if (num > a) {
                c = b;
                b = a;
                a = num;
            } else if (a > num && num > b) {
                c = b;
                b = num;
            } else if (b > num && num > c) {
                c = num;
            }
        }
        return c == Long.MIN_VALUE ? (int) a : (int) c;
    }
}
#######使用null作为最小值，此时需要判断第一次赋值需要按照abc的顺序。
class Solution {
    public int thirdMax(int[] nums) {
        Integer a = null, b = null, c = null;
        for (int num : nums) {
            if (a == null || num > a) {
                c = b;
                b = a;
                a = num;
            } else if (a > num && (b == null || num > b)) {
                c = b;
                b = num;
            } else if (b != null && b > num && (c == null || num > c)) {
                c = num;
            }
        }
        return c == null ? a : c;
    }
}



